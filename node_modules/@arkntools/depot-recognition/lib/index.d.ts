/// <reference types="node" />
import type { JSZipLoadOptions } from 'jszip';
import Jimp from 'jimp';
import type { RecognizeNumberResult } from './number';
import type { RecognizeSimilarityResult } from './similarity';
export type ZipData = string | ArrayBuffer | Uint8Array | Buffer | Blob;
export interface RecognizerConfig {
    order: string[];
    pkg: ZipData | [ZipData, JSZipLoadOptions | undefined];
    preload?: boolean;
}
export interface RecognizeResult {
    debug: {
        scale: number;
    };
    pos: {
        x: number;
        y: number;
        l: number;
        row: number;
        col: number;
    };
    view: {
        left: number;
        right: number;
        top: number;
        bottom: number;
    };
    sim?: RecognizeSimilarityResult;
    num?: RecognizeNumberResult;
}
export declare class DeportRecognizer {
    protected config: RecognizerConfig;
    protected isDebug: boolean;
    protected itemOrder: string[] | undefined;
    protected itemImgMap: Map<string, Jimp> | undefined;
    protected preloadResourcePromise: Promise<void> | undefined;
    constructor(config: RecognizerConfig);
    setDebug(enable: boolean): void;
    setOrder(order: string[]): void;
    preloadResource(): void;
    protected loadResource(): Promise<{
        imgMap: Map<string, Jimp>;
        order: string[];
    }>;
    recognize(file: string | Buffer, onProgress?: (step: number) => void): Promise<{
        data: RecognizeResult[];
        debug: string[];
    }>;
}
