export interface Range {
    start: number;
    length: number;
}
export declare const getRangeEnd: ({ start, length }: Range) => number;
export declare const inRange: (x: number, { start, length }: Range) => boolean;
export declare const findRange: (x: number, ranges: Range[]) => Range | undefined;
export declare const findRangeIndex: (x: number, ranges: Range[]) => number;
export declare const getRanges: (arr: boolean[]) => Range[];
export declare const getRangesBy: {
    (arr: boolean[], fn: (range: Range) => boolean): Range[];
    <T = any>(arr: boolean[], fn: (range: Range, data: T) => boolean, preCalc: (ranges: Range[]) => T): Range[];
};
export declare const removeRangesNoise: (ranges: Range[], size?: number) => Range[];
