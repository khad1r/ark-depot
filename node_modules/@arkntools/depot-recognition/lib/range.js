import { findIndex, last, remove, transform } from 'lodash';
export const getRangeEnd = ({ start, length }) => start + length;
export const inRange = (x, { start, length }) => start <= x && x < start + length;
export const findRange = (x, ranges) => ranges.find(range => inRange(x, range));
export const findRangeIndex = (x, ranges) => findIndex(ranges, range => inRange(x, range));
export const getRanges = (arr) => transform(arr, (a, inRange, x) => {
    if (!a.length) {
        if (inRange)
            a.push({ start: x, length: 1 });
        return;
    }
    if (inRange) {
        const lastRange = last(a);
        if (x === getRangeEnd(lastRange))
            lastRange.length++;
        else
            a.push({ start: x, length: 1 });
    }
}, []);
export const getRangesBy = (arr, fn, preCalc) => {
    const ranges = getRanges(arr);
    const data = preCalc === null || preCalc === void 0 ? void 0 : preCalc(ranges);
    return ranges.filter(range => fn(range, data));
};
export const removeRangesNoise = (ranges, size = 1) => remove(ranges, ({ length }) => length <= size);
