import { findLast, sortBy } from 'lodash';
import Jimp from 'jimp';
import { isDiffsTooClose, isTrustedSimResult } from '../utils/trustedResult';
const getSim = (input, imgMap, order) => {
    if (!order.length)
        return null;
    const diffs = sortBy(order.map(id => [id, Jimp.diff(input, imgMap.get(id), 0.2).percent]), 1);
    const [name, diff] = diffs[0];
    return { name, diff, diffs, diffsTooClose: isDiffsTooClose(diffs) };
};
export const getSims = (inputs, imgMap, order) => {
    if (inputs.length <= 2) {
        return inputs.map(input => getSim(input, imgMap, order));
    }
    const inputCenterI = Math.floor(inputs.length / 2);
    const inputCenterSim = getSim(inputs[inputCenterI], imgMap, order);
    if (isTrustedSimResult(inputCenterSim) && !inputCenterSim.diffsTooClose) {
        const compareCenterI = order.findIndex(name => name === inputCenterSim.name);
        return [
            ...getSims(inputs.slice(0, inputCenterI), imgMap, order.slice(0, compareCenterI)),
            inputCenterSim,
            ...getSims(inputs.slice(inputCenterI + 1), imgMap, order.slice(compareCenterI + 1)),
        ];
    }
    else {
        const leftSims = getSims(inputs.slice(0, inputCenterI), imgMap, order);
        const leftLastSim = findLast(leftSims, sim => sim);
        const rightSims = getSims(inputs.slice(inputCenterI + 1), imgMap, isTrustedSimResult(leftLastSim)
            ? order.slice(order.findIndex(name => name === leftLastSim.name) + 1)
            : order);
        return [...leftSims, inputCenterSim, ...rightSims];
    }
};
